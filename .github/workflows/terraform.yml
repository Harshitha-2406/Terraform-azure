name: 'Terraform Plan/Apply'

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

jobs:
  terraform-init-plan:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        creds: AZURE_CLIENT_ID: '${{ secrets.AZURE_CLIENT_ID }}'
               AZURE_CLIENT_SECRET: '${{ secrets.AZURE_CLIENT_SECRET }}'
               AZURE_CONTAINER_NAME: '${{ secrets.AZURE_CONTAINER_NAME }}'
               AZURE_STORAGE_ACCESS_KEY: '${{ secrets.AZURE_STORAGE_ACCESS_KEY }}'
               AZURE_STORAGE_ACCOUNT_NAME: '${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}'
               AZURE_SUBSCRIPTION_ID: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
               AZURE_TENANT_ID: '${{ secrets.AZURE_TENANT_ID }}'
               DATABRICKS_ACCOUNT_ID: '${{ secrets.DATABRICKS_ACCOUNT_ID }}'
               DATABRICKS_ACCOUNT_PASSWORD: '${{ secrets.DATABRICKS_ACCOUNT_PASSWORD }}'
               DATABRICKS_ACCOUNT_USERNAME: '${{ secrets.DATABRICKS_ACCOUNT_USERNAME }}'

    - name: 'Run Azure CLI commands'
      run: |
        az account show
        az group list
        pwd 

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.1.0

    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}" -backend-config="key=authenticaterraformdev.tfstate"
    # - name: Terraform state rm
    #   run: |
    #         terraform state rm 'module.edp-qa-infra-tf.databricks_grants.schema_grants["edp_qa_trusted-auditusage"]'     
    # - name: Terraform state list
    #   run: |
    #         terraform state list
    - name: Terraform Plan
        #run: terraform plan -out=tfplan -var-file=UnityCatalog.auto.tfvars
      run: |
          terraform plan -out=tfplan -var-file=config.auto.tfvars
        
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-init-plan
    
    environment: dev
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.1.0
    
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        creds: AZURE_CLIENT_ID: '${{ secrets.AZURE_CLIENT_ID }}'
               AZURE_CLIENT_SECRET: '${{ secrets.AZURE_CLIENT_SECRET }}'
               AZURE_CONTAINER_NAME: '${{ secrets.AZURE_CONTAINER_NAME }}'
               AZURE_STORAGE_ACCESS_KEY: '${{ secrets.AZURE_STORAGE_ACCESS_KEY }}'
               AZURE_STORAGE_ACCOUNT_NAME: '${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}'
               AZURE_SUBSCRIPTION_ID: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
               AZURE_TENANT_ID: '${{ secrets.AZURE_TENANT_ID }}'
               DATABRICKS_ACCOUNT_ID: '${{ secrets.DATABRICKS_ACCOUNT_ID }}'
               DATABRICKS_ACCOUNT_PASSWORD: '${{ secrets.DATABRICKS_ACCOUNT_PASSWORD }}'
               DATABRICKS_ACCOUNT_USERNAME: '${{ secrets.DATABRICKS_ACCOUNT_USERNAME }}'

    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}" -backend-config="key=authenticaterraformdev.tfstate"

    - name: terraform fmt
      run: |
          terraform fmt
    - name: Terraform Plan
      #run: terraform plan -out=tfplan -var-file=UnityCatalog.auto.tfvars
      run: |
        terraform plan -out=tfplan -var-file=config.auto.tfvars


    - name: Terraform Apply
      if: github.ref == 'refs/heads/dev'
      run: terraform apply -auto-approve tfplan

