name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - dev
      
  pull_request:
    branches:
      - dev

  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_databricks_account_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
  TF_VAR_databricks_account_password: ${{ secrets.DATABRICKS_ACCOUNT_PASSWORD }}
  TF_VAR_databricks_account_username: ${{ secrets.DATABRICKS_ACCOUNT_USERNAME }}

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                             -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" \
                             -backend-config="key=terraform.tfstate" \
                             -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
                             -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                             -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
                             -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                             -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Validate
        run: terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
                             -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" \
                             -backend-config="key=terraform.tfstate" \
                             -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
                             -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                             -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
                             -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                             -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars" -out "tfplan"

      - name: Save Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: tfplan

      - name: Terraform Apply
        run: terraform apply -input=false "tfplan"

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

           - name: Terraform Init
        run: terraform init

                  -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
          -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -backend-config="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Terraform Destroy
        run: terraform destroy --auto-approve -var-file="terraform.tfvars"
