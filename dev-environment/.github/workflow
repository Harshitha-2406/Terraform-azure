# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters: 
- name: terraformconfig
  displayName: apply changes?
  type: string
  values:
  - plan
  - apply
  - destroy
  default: plan

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:

- group: mtech-databricks-terraform-dev

steps:

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  inputs:
    terraformVersion: '0.14.3' #'1.2.3'

- task: TerraformTaskV2@2 
  displayName: install terraform
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/dev-environment'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'
    

- task: TerraformTaskV2@2 
  displayName: terraform plan
  condition: eq('${{ parameters.terraformconfig }}', 'plan')
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/dev-environment'
    commandOptions: '-out=tfplan -lock=false -var-file="config.auto.tfvars"'
    environmentServiceNameAzureRM: '$(subscription)'
    environmentVariables: 'TF_LOG=DEBUG'

- task: TerraformTaskV2@2 
  displayName: terraform plan
  condition: eq('${{ parameters.terraformconfig }}', 'apply')
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/dev-environment'
    commandOptions: '-out=tfplan -lock=false -var-file="config.auto.tfvars"'
    environmentServiceNameAzureRM: '$(subscription)'
      
- task: TerraformTaskV2@2
  displayName: terraform apply
  condition: eq('${{ parameters.terraformconfig }}', 'apply')
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/dev-environment'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: '$(subscription)'
    environmentVariables: 'TF_LOG=DEBUG'

- task: TerraformTaskV2@2
  displayName: terraform destroy
  condition: eq('${{ parameters.terraformconfig }}', 'destroy')
  inputs:
    provider: 'azurerm'
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/dev-environment'
    commandOptions: '-var-file="config.auto.tfvars"'
    environmentServiceNameAzureRM: '$(subscription)'
